import "@testing-library/jest-dom";
import { render, screen, fireEvent } from "@testing-library/react";
import ItemForm from "../components/ItemForm";
import App from "../components/App";

test("calls the onItemFormSubmit callback prop when the form is submitted", () => {
  const onItemFormSubmit = jest.fn();
  render(<ItemForm onItemFormSubmit={onItemFormSubmit} />);

  // Simulate user typing in the "Name" and "Category" fields
  fireEvent.change(screen.getByLabelText(/Name:/), {
    target: { value: "Ice Cream" },
  });

  fireEvent.change(screen.getByLabelText(/Category:/), {
    target: { value: "Dessert" },
  });

  // Simulate form submission
  fireEvent.submit(screen.getByText(/Add to List/));

  // Ensure the callback was called with the correct item object
  expect(onItemFormSubmit).toHaveBeenCalledWith(
    expect.objectContaining({
      id: expect.any(String), // Expect a string ID, generated by UUID
      name: "Ice Cream",      // The item name
      category: "Dessert",    // The selected category
    })
  );
});

test("adds a new item to the list when the form is submitted", () => {
  render(<App />);

  // Get the initial count of items in the "Dessert" category
  const dessertCount = screen.queryAllByText(/Dessert/).length;

  // Simulate user input for "Name" and "Category"
  fireEvent.change(screen.getByLabelText(/Name:/), {
    target: { value: "Ice Cream" },
  });

  fireEvent.change(screen.getByLabelText(/Category:/), {
    target: { value: "Dessert" },
  });

  // Simulate form submission
  fireEvent.submit(screen.getByText(/Add to List/));

  // Ensure the new item ("Ice Cream") is in the document
  expect(screen.queryByText(/Ice Cream/)).toBeInTheDocument();

  // Check that the "Dessert" category count has increased
  expect(screen.queryAllByText(/Dessert/).length).toBe(dessertCount + 1);
});
